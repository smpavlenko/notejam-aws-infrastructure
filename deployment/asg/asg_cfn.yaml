---
AWSTemplateFormatVersion: 2010-09-09

Description: Notejam ASG

Parameters:
  VpcStackName:
    Description: VPC Cloudformation stack name
    Type: String

  ElbStackName:
    Description: ELB Cloudformation stack name
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.

  HighCpuThreshold:
    Description: CPU Threschold to add addition nodes in cluster
    Type: Number
    Default: 0

  MinClusterSize:
    Description: Min number of EC2 instances in cluster
    Type: Number
    Default: 0

  MaxClusterSize:
    Description: Max number of EC2 instances in cluster
    Type: Number
    Default: 0

  DesiredClusterSize:
    Description: Desired number of EC2 instances in cluster
    Type: Number
    Default: 0

  LowCpuThreshold:
    Description: CPU Threschold to remove addition nodes in cluster
    Type: Number
    Default: 0

  ScalingPeriod:
    Description: Period of Time to calculate scaling average on (multiples of 60)
    Type: Number
    Default: 600

  Env:
    Description: Environment name
    Type: String
    AllowedValues:
      - production
      - development
      - testing

Conditions:
  isDevEnv: !Equals [ !Ref Env, development ]
  isProd: !Equals [ !Ref Env, production ]
  isNotDevEnv: !Or [ !Equals [!Ref Env, testing ], !Equals [!Ref Env, production ]]

Mappings:
  Ubuntu18Ami:
    us-east-1:
      HVM64: ami-07ebfd5b3428b6f4d
    eu-central-1:
      HVM64: ami-0b418580298265d5c

Resources:
  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "notejam-${AWS::StackName}-${AWS::Region}-ec2-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2Role

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: isNotDevEnv
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredClusterSize
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      LoadBalancerNames:
        - Fn::ImportValue: !Sub "${ElbStackName}-elb-${Env}"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TerminationPolicies:
        - OldestLaunchConfiguration
        - OldestInstance
        - Default
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VpcStackName}-public-subnet1"
        - Fn::ImportValue: !Sub "${VpcStackName}-public-subnet2"
        - Fn::ImportValue: !Sub "${VpcStackName}-public-subnet3"
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 100
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref InstanceType
      MinSize: !Ref MinClusterSize
      MaxSize: !Ref MaxClusterSize
      DesiredCapacity: !Ref DesiredClusterSize
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMaxSize
            - GroupTerminatingInstances
            - GroupStandbyInstances
            - GroupTotalInstances
            - GroupPendingInstances
            - GroupDesiredCapacity
            - GroupMinSize
            - GroupInServiceInstances
      Tags:
        - Key: Env
          Value: !Ref Env
          PropagateAtLaunch: true

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: isNotDevEnv
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref Ec2InstanceProfile
        ImageId: !FindInMap [ Ubuntu18Ami, !Ref 'AWS::Region', HVM64 ]
        InstanceInitiatedShutdownBehavior: terminate
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - Fn::ImportValue: !Sub "${ElbStackName}-node-${Env}-sg"
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #cloud-config
              preserve_hostname: true
              manage_etc_hosts: false
              runcmd:
                - sudo apt update
                - sudo apt -y install python-pip
                - sudo pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                - git clone https://github.com/komarserjio/notejam /home/ubuntu/notejam
                - cd /home/ubuntu/notejam/flask
                - pip install -r requirements.txt
                - echo 'from notejam import app' >> run.py
                - echo 'app.run(host="0.0.0.0")' >> run.py
                - chmod +x run.py
                - ENVIRONMENT=${Env} python run.py &
                - /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoscalingGroup --region ${AWS::Region}

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: isProd
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: '300'
      AutoScalingGroupName:
        Ref: AutoscalingGroup
      ScalingAdjustment: 2

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: isProd
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: '300'
      AutoScalingGroupName:
        Ref: AutoscalingGroup
      ScalingAdjustment: -1

  CpuAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Condition: isProd
    Properties:
      AlarmDescription: !Sub "Scale-out if the average CPU >= ${HighCpuThreshold} for ${ScalingPeriod}"
      AlarmActions:
        - Ref: ScaleOutPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoscalingGroup
      Statistic: Average
      Period: !Ref ScalingPeriod
      EvaluationPeriods: 1
      Threshold: !Ref HighCpuThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold

  CpuAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Condition: isProd
    Properties:
      AlarmDescription: !Sub "Scale-in if the average CPU < ${LowCpuThreshold} for ${ScalingPeriod}"
      AlarmActions:
        - Ref: ScaleInPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoscalingGroup
      Statistic: Average
      Period: !Ref ScalingPeriod
      EvaluationPeriods: 1
      Threshold: !Ref LowCpuThreshold
      ComparisonOperator: LessThanThreshold

  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: isNotDevEnv
    Properties:
      DashboardName: !Sub 'Notejam-metrics-${AWS::Region}-${Env}-${AWS::StackName}'
      DashboardBody:
        !Sub
          - |
              {
                  "widgets": [
                      {
                          "type": "metric",
                          "x": 0,
                          "y": 0,
                          "width": 12,
                          "height": 6,
                          "properties": {
                              "metrics": [
                                  [ "AWS/ELB", "RequestCount", "LoadBalancerName", "${ELBName}" ]
                              ],
                              "view": "timeSeries",
                              "stacked": false,
                              "region": "${AWS::Region}",
                              "title": "Request Count",
                              "period": 300,
                              "stat": "Sum"
                          }
                      },
                      {
                          "type": "metric",
                          "x": 0,
                          "y": 6,
                          "width": 12,
                          "height": 6,
                          "properties": {
                              "view": "timeSeries",
                              "stacked": false,
                              "metrics": [
                                  [ "AWS/AutoScaling", "GroupTotalInstances", "AutoScalingGroupName", "${AutoscalingGroup}" ]
                              ],
                              "region": "${AWS::Region}",
                              "title": "Total Instances"
                          }
                      },
                      {
                          "type": "metric",
                          "x": 12,
                          "y": 6,
                          "width": 12,
                          "height": 6,
                          "properties": {
                              "view": "timeSeries",
                              "stacked": false,
                              "metrics": [
                                  [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${AutoscalingGroup}" ]
                              ],
                              "region": "${AWS::Region}",
                              "title": "Cluster CPU Utilization"
                          }
                      },
                      {
                          "type": "metric",
                          "x": 12,
                          "y": 0,
                          "width": 12,
                          "height": 6,
                          "properties": {
                              "view": "timeSeries",
                              "stacked": false,
                              "metrics": [
                                  [ "AWS/ELB", "HealthyHostCount", "LoadBalancerName", "${ELBName}" ]
                              ],
                              "region": "${AWS::Region}",
                              "title": "Healthy Host Count"
                          }
                      }
                  ]
              }
          - ELBName:
              Fn::ImportValue: !Sub "${ElbStackName}-elb-${Env}"

  TestInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: isDevEnv
    Properties:
      GroupDescription: "Security Group for single development instance"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-vpc"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "instance-${Env}-sg-${AWS::StackName}"
        - Key: Env
          Value: !Ref Env

  Instance:
    Type: AWS::EC2::Instance
    Condition: isDevEnv
    Properties:
      ImageId: !FindInMap [ Ubuntu18Ami, !Ref 'AWS::Region', HVM64 ]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          SubnetId:
            Fn::ImportValue: !Sub "${VpcStackName}-public-subnet1"
          GroupSet:
            - !Ref TestInstanceSecurityGroup
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'ec2', !FindInMap [Ubuntu18Ami, !Ref 'AWS::Region', HVM64] ]]
        - Key: Env
          Value: !Ref Env
      UserData:
        Fn::Base64:
          !Sub |
          #cloud-config
          preserve_hostname: true
          manage_etc_hosts: false
          runcmd:
            - sudo apt update
            - sudo apt -y install python-pip
            - git clone https://github.com/komarserjio/notejam /home/ubuntu/notejam
            - cd /home/ubuntu/notejam/flask
            - pip install -r requirements.txt
            - echo 'from notejam import app' >> run.py
            - echo 'app.run(host="0.0.0.0")' >> run.py
            - chmod +x run.py
            - ENVIRONMENT=${Env} python run.py

Outputs:
  TestInstance:
    Condition: isDevEnv
    Description: The ID of development instance.
    Value: !Ref Instance

  TestInstanceDns:
    Condition: isDevEnv
    Description: The Public DNS of development instance.
    Value: !GetAtt Instance.PublicDnsName

  TestInstanceIp:
    Condition: isDevEnv
    Description: The Public IP of development instance.
    Value: !GetAtt Instance.PublicIp

  AutoscalingGroup:
    Condition: isNotDevEnv
    Description: Autoscaling group of the cluster.
    Value: !Ref AutoscalingGroup
